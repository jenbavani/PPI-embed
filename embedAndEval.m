function [EMBEDDING,LOSS,STRESS,new_graph,new_dists] = embedAndEval(GRAPH,DISTS,DIM)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% [EMBEDDING,LOSS,STRESS,new_graph,new_dists] = 
%                                         embedAndEvaluate(GRAPH,DISTS,DIM)
%
% (1) Embed the GRAPH into a DIM-dimensional space based on the distance
%     matrix DISTS. (metric MDS)
% (2) Attempt to recover the graph using Euclidean distance based edge
%     discovery.
% (3) Evaluate the stress generated by MDS and the graph loss.
%
% INPUT:
% GRAPH - original graph
% DISTS - matrix of pairwise distances
% 
% OUTPUT:
% EMBEDDING - locations of the nodes in DIM-space.
% LOSS - graph loss = |(E XOR newE)| / |E|
% STRESS - 
% new_graph
% new_distances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Embed using mMDS.
javaaddpath('/Users/vkrishnan/Documents/research/harc/MDS/mdscale.jar');
EMBEDDING = mdscale.MDS.distanceScaling(DISTS,DIM);
EMBEDDING = EMBEDDING';

% Get new distances and discover edges.
new_dists = allDistances(EMBEDDING,EMBEDDING);
num_edges = sum(sum(GRAPH))/2
new_graph = discoverEdges(EMBEDDING,num_edges);

% Calculate stress and graph loss.
STRESS = mmdsStress(EMBEDDING,DISTS);
LOSS = graphLoss(GRAPH,new_graph);
